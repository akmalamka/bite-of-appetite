/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type LinkSelection = string;

export type RecipeList = {
  _type: 'recipeList';
  title: string;
};

export type ArticleList = {
  _type: 'articleList';
  title: string;
};

export type ImageCarousel = {
  _type: 'imageCarousel';
  title: string;
  contentReference: 'recipes' | 'foodForThought';
  ctaButton?: {
    ctaText: string;
    ctaLink: LinkSelection;
  };
};

export type HeroQuote = {
  _type: 'heroQuote';
  quote: string;
  author?: string;
};

export type HeroImage = {
  _type: 'heroImage';
  title: string;
  typingTexts?: Array<string>;
  subtitle: string;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: 'imageWithAlt';
  };
  imagePosition: 'left' | 'right';
  ctaButton?: {
    ctaText: string;
    ctaLink: LinkSelection;
  };
};

export type HeroTitle = {
  _type: 'heroTitle';
  title: string;
};

export type SocialMedias = {
  _id: string;
  _type: 'socialMedias';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  socials: Array<{
    title?: string;
    link: string;
    _type: 'social';
    _key: string;
  }>;
};

export type Categories = {
  _id: string;
  _type: 'categories';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  categoryGroup?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'categoryGroups';
  };
};

export type CategoryGroups = {
  _id: string;
  _type: 'categoryGroups';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
};

export type Articles = {
  _id: string;
  _type: 'articles';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  publishedDate: string;
  subtitle: string;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: 'imageWithAlt';
  };
  writingBy: string;
  photoBy: string;
  story: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Recipes = {
  _id: string;
  _type: 'recipes';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  publishedDate: string;
  categories: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'categories';
  }>;
  subtitle: string;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: 'imageWithAlt';
  };
  time: string;
  recipeBy: string;
  inspiredBy?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  foodPhotographyBy: string;
  foodStylingBy: string;
  story: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type ImageWithAlt = {
  _type: 'imageWithAlt';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt: string;
};

export type LayoutNavigationMenu = {
  _id: string;
  _type: 'layoutNavigationMenu';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  order?: number;
  text?: string;
  link?: LinkSelection;
};

export type Pages = {
  _id: string;
  _type: 'pages';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  url: Slug;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  components?: Array<{
    _key: string;
  } & HeroTitle | {
    _key: string;
  } & HeroImage | {
    _key: string;
  } & HeroQuote | {
    _key: string;
  } & ImageCarousel | {
    _key: string;
  } & ArticleList | {
    _key: string;
  } & RecipeList>;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = LinkSelection | RecipeList | ArticleList | ImageCarousel | HeroQuote | HeroImage | HeroTitle | SocialMedias | Categories | CategoryGroups | Articles | Recipes | ImageWithAlt | LayoutNavigationMenu | Pages | MediaTag | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../sanity/sanity.fetcher.ts
// Variable: layoutQuery
// Query: {      'socials': *[_type == 'socialMedias'][0].socials,      'navigation': *[        _type == 'layoutNavigationMenu'      ] | order(order asc)    }
export type LayoutQueryResult = {
  socials: Array<{
    title?: string;
    link: string;
    _type: 'social';
    _key: string;
  }> | null;
  navigation: Array<{
    _id: string;
    _type: 'layoutNavigationMenu';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    order?: number;
    text?: string;
    link?: LinkSelection;
  }>;
};

// Source: ../sanity/sanity.query.ts
// Variable: pageQuery
// Query: *[    _type == 'pages'    && url.current == $slug  ][0] {    title,    description,    ogImage,    components[] {      ...,        _type == 'imageCarousel' => {    ...,    'recipes': *[      _type == 'recipes'    ] | order(date desc) [0...8] {      _id,      title,      subtitle,      image {          asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }      },    },  },        _type == 'articleList' => {    ...,    'articles': *[      _type == 'articles'    ] | order(publishedDate desc) [0...5] {      _id,      slug,      title,      subtitle,      image {          asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }      },    },    'totalArticles': count(*[_type == 'articles']),  },        _type == 'recipeList' => {    ...,    'recipes': *[      _type == 'recipes'    ] | order(publishedDate desc) [0...5] {      _id,      slug,      title,      subtitle,      categories[]-> {        _id,        title,      },      image {          asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }      },    },    'totalRecipes': count(*[_type == 'recipes']),  },        _type == 'heroImage' => {    ...,    image {        asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }    },  },    },  }
export type PageQueryResult = {
  title: string | null;
  description: string | null;
  ogImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  components: Array<{
    _key: string;
    _type: 'articleList';
    title: string;
    articles: Array<{
      _id: string;
      slug: Slug;
      title: string;
      subtitle: string;
      image: {
        asset: {
          dimensions: SanityImageDimensions | null;
          lqip: string | null;
          altText: string | null;
          _ref: string;
        } | null;
      };
    }>;
    totalArticles: number;
  } | {
    _key: string;
    _type: 'heroImage';
    title: string;
    typingTexts?: Array<string>;
    subtitle: string;
    image: {
      asset: {
        dimensions: SanityImageDimensions | null;
        lqip: string | null;
        altText: string | null;
        _ref: string;
      } | null;
    };
    imagePosition: 'left' | 'right';
    ctaButton?: {
      ctaText: string;
      ctaLink: LinkSelection;
    };
  } | {
    _key: string;
    _type: 'heroQuote';
    quote: string;
    author?: string;
  } | {
    _key: string;
    _type: 'heroTitle';
    title: string;
  } | {
    _key: string;
    _type: 'imageCarousel';
    title: string;
    contentReference: 'foodForThought' | 'recipes';
    ctaButton?: {
      ctaText: string;
      ctaLink: LinkSelection;
    };
    recipes: Array<{
      _id: string;
      title: string;
      subtitle: string;
      image: {
        asset: {
          dimensions: SanityImageDimensions | null;
          lqip: string | null;
          altText: string | null;
          _ref: string;
        } | null;
      };
    }>;
  } | {
    _key: string;
    _type: 'recipeList';
    title: string;
    recipes: Array<{
      _id: string;
      slug: Slug;
      title: string;
      subtitle: string;
      categories: Array<{
        _id: string;
        title: string;
      }>;
      image: {
        asset: {
          dimensions: SanityImageDimensions | null;
          lqip: string | null;
          altText: string | null;
          _ref: string;
        } | null;
      };
    }>;
    totalRecipes: number;
  }> | null;
} | null;
// Variable: paginatedArticlesQuery
// Query: *[_type == 'articles'] | order(publishedDate desc) [$start...$end] {    _id,    slug,    title,    subtitle,    image {        asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }    },  }
export type PaginatedArticlesQueryResult = Array<{
  _id: string;
  slug: Slug;
  title: string;
  subtitle: string;
  image: {
    asset: {
      dimensions: SanityImageDimensions | null;
      lqip: string | null;
      altText: string | null;
      _ref: string;
    } | null;
  };
}>;
// Variable: paginatedRecipesQuery
// Query: *[_type == 'recipes'] | order(publishedDate desc) [$start...$end] {    _id,    slug,    title,    subtitle,    categories[]-> {      _id,      title,    },    image {        asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }    },  }
export type PaginatedRecipesQueryResult = Array<{
  _id: string;
  slug: Slug;
  title: string;
  subtitle: string;
  categories: Array<{
    _id: string;
    title: string;
  }>;
  image: {
    asset: {
      dimensions: SanityImageDimensions | null;
      lqip: string | null;
      altText: string | null;
      _ref: string;
    } | null;
  };
}>;
// Variable: articleQuery
// Query: {    'article': *[      _type == 'articles'      && slug.current == $slug    ][0] {      _id,      title,      publishedDate,      subtitle,      image {          asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }      },      writingBy,      photoBy,      story,    },  }
export type ArticleQueryResult = {
  article: {
    _id: string;
    title: string;
    publishedDate: string;
    subtitle: string;
    image: {
      asset: {
        dimensions: SanityImageDimensions | null;
        lqip: string | null;
        altText: string | null;
        _ref: string;
      } | null;
    };
    writingBy: string;
    photoBy: string;
    story: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
  } | null;
};
// Variable: recipeQuery
// Query: {    'recipe': *[      _type == 'recipes'      && slug.current == $slug    ][0] {      _id,      title,      publishedDate,      subtitle,      categories[]-> {        _id,        title,      },      image {          asset->{    "dimensions": metadata.dimensions,    "lqip": metadata.lqip,    altText,    "_ref": _id  }      },      time,      recipeBy,      inspiredBy,      foodPhotographyBy,      foodStylingBy,      story,    },  }
export type RecipeQueryResult = {
  recipe: {
    _id: string;
    title: string;
    publishedDate: string;
    subtitle: string;
    categories: Array<{
      _id: string;
      title: string;
    }>;
    image: {
      asset: {
        dimensions: SanityImageDimensions | null;
        lqip: string | null;
        altText: string | null;
        _ref: string;
      } | null;
    };
    time: string;
    recipeBy: string;
    inspiredBy: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    foodPhotographyBy: string;
    foodStylingBy: string;
    story: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
  } | null;
};

// Query TypeMap
import '@sanity/client';

declare module '@sanity/client' {
  interface SanityQueries {
    '\n    {\n      \'socials\': *[_type == \'socialMedias\'][0].socials,\n      \'navigation\': *[\n        _type == \'layoutNavigationMenu\'\n      ] | order(order asc)\n    }\n  ': LayoutQueryResult;
    '\n  *[\n    _type == \'pages\'\n    && url.current == $slug\n  ][0] {\n    title,\n    description,\n    ogImage,\n    components[] {\n      ...,\n\n      \n  _type == \'imageCarousel\' => {\n    ...,\n    \'recipes\': *[\n      _type == \'recipes\'\n    ] | order(date desc) [0...8] {\n      _id,\n      title,\n      subtitle,\n      image {\n        \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n      },\n    },\n  }\n,\n\n      \n  _type == \'articleList\' => {\n    ...,\n    \'articles\': *[\n      _type == \'articles\'\n    ] | order(publishedDate desc) [0...5] {\n      _id,\n      slug,\n      title,\n      subtitle,\n      image {\n        \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n      },\n    },\n    \'totalArticles\': count(*[_type == \'articles\']),\n  }\n,\n\n      \n  _type == \'recipeList\' => {\n    ...,\n    \'recipes\': *[\n      _type == \'recipes\'\n    ] | order(publishedDate desc) [0...5] {\n      _id,\n      slug,\n      title,\n      subtitle,\n      categories[]-> {\n        _id,\n        title,\n      },\n      image {\n        \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n      },\n    },\n    \'totalRecipes\': count(*[_type == \'recipes\']),\n  }\n,\n\n      \n  _type == \'heroImage\' => {\n    ...,\n    image {\n      \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n    },\n  }\n,\n\n    },\n  }\n': PageQueryResult;
    '\n  *[_type == \'articles\'] | order(publishedDate desc) [$start...$end] {\n    _id,\n    slug,\n    title,\n    subtitle,\n    image {\n      \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n    },\n  }\n': PaginatedArticlesQueryResult;
    '\n  *[_type == \'recipes\'] | order(publishedDate desc) [$start...$end] {\n    _id,\n    slug,\n    title,\n    subtitle,\n    categories[]-> {\n      _id,\n      title,\n    },\n    image {\n      \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n    },\n  }\n': PaginatedRecipesQueryResult;
    '\n  {\n    \'article\': *[\n      _type == \'articles\'\n      && slug.current == $slug\n    ][0] {\n      _id,\n      title,\n      publishedDate,\n      subtitle,\n      image {\n        \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n      },\n      writingBy,\n      photoBy,\n      story,\n    },\n  }\n': ArticleQueryResult;
    '\n  {\n    \'recipe\': *[\n      _type == \'recipes\'\n      && slug.current == $slug\n    ][0] {\n      _id,\n      title,\n      publishedDate,\n      subtitle,\n      categories[]-> {\n        _id,\n        title,\n      },\n      image {\n        \n  asset->{\n    "dimensions": metadata.dimensions,\n    "lqip": metadata.lqip,\n    altText,\n    "_ref": _id\n  }\n\n      },\n      time,\n      recipeBy,\n      inspiredBy,\n      foodPhotographyBy,\n      foodStylingBy,\n      story,\n    },\n  }\n': RecipeQueryResult;
  }
}
