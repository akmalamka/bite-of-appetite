/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type LinkSelection = string;

export type HeroTitle = {
  _type: 'heroTitle';
  title: string;
  subtitle?: string;
};

export type Header = {
  _id: string;
  _type: 'header';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type SocialMedias = {
  _id: string;
  _type: 'socialMedias';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  socials: Array<{
    title?: string;
    link: string;
    _type: 'social';
    _key: string;
  }>;
};

export type LayoutNavigationMenu = {
  _id: string;
  _type: 'layoutNavigationMenu';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  order?: number;
  text?: string;
  link?: LinkSelection;
};

export type Pages = {
  _id: string;
  _type: 'pages';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  url: Slug;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  components?: Array<{
    _key: string;
  } & HeroTitle>;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = LinkSelection | HeroTitle | Header | SocialMedias | LayoutNavigationMenu | Pages | MediaTag | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../sanity/sanity.fetcher.ts
// Variable: layoutQuery
// Query: {      'footer': *[_type == 'layoutFooter'][0],      'socials': *[_type == 'socialMedias'][0].socials,      'navigation': *[        _type == 'layoutNavigationMenu'      ] | order(order asc)    }
export type LayoutQueryResult = {
  footer: null;
  socials: Array<{
    title?: string;
    link: string;
    _type: 'social';
    _key: string;
  }> | null;
  navigation: Array<{
    _id: string;
    _type: 'layoutNavigationMenu';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    order?: number;
    text?: string;
    link?: LinkSelection;
  }>;
};

// Source: ../sanity/sanity.query.ts
// Variable: pageQuery
// Query: *[    _type == 'pages'    && url.current == $slug  ][0] {    title,    description,    ogImage,    components[] {      ...,    },  }
export type PageQueryResult = {
  title: string | null;
  description: string | null;
  ogImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  components: Array<{
    _key: string;
    _type: 'heroTitle';
    title: string;
    subtitle?: string;
  }> | null;
} | null;

// Query TypeMap
import '@sanity/client';

declare module '@sanity/client' {
  interface SanityQueries {
    '\n    {\n      \'footer\': *[_type == \'layoutFooter\'][0],\n      \'socials\': *[_type == \'socialMedias\'][0].socials,\n      \'navigation\': *[\n        _type == \'layoutNavigationMenu\'\n      ] | order(order asc)\n    }\n  ': LayoutQueryResult;
    '\n  *[\n    _type == \'pages\'\n    && url.current == $slug\n  ][0] {\n    title,\n    description,\n    ogImage,\n    components[] {\n      ...,\n    },\n  }\n': PageQueryResult;
  }
}
